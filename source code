#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<stdlib.h>
#include<string.h>
void stringpass(char []);
void delay(unsigned int);
void w_synch();
void synch();
void busy_waiting();
void spinlock();
void c_semaphore();
void b_semaphore();
void code();

int main()
{
int i,j,s;
	do{
	stringpass("	======================================================\n");
	stringpass("	======================================================\n");
	stringpass("	==		Enter your choice 		    ==\n");
	stringpass("	==	Enter 1 for print without synchronization   ==\n");
	stringpass("	==	Enter 2 for print with synchronization      ==\n");
	stringpass("	==	Enter 3 for print in busy waiting           ==\n");
	stringpass("	==	Enter 4 for print in spinlock               ==\n");
	stringpass("	==	Enter 5 for print in counting semaphore     ==\n");
	stringpass("	==	Enter 6 for print in binary semaphore       ==\n");
	stringpass("	==	Enter 7 for open code                       ==\n");
	stringpass("	==	Enter 8 for exit                            ==\n");
	stringpass(	"	======================================================\n");
	stringpass("	======================================================\n");
	printf("		");
	scanf("%d",&j);
switch(j)
{
case 1: w_synch();
break;
case 2: synch();
break ;
case 3: busy_waiting();
break ;
case 4: spinlock();
break ;
case 5: c_semaphore();
break ;
case 6: b_semaphore();
break ;
case 7:code();
break ;
case 8: exit(0);
break ;
default:
stringpass("Wrong choice");
}
s=0;
stringpass("want more pree 1");
scanf("%d",&s);

}while(s);
getch();
return 0;
}
void w_synch()
{
		int i,j,k;
	for(j=0;j<=5;j++)
	{
	i=rand();
	k=i%2;
	if(k==1)
	printf("boy\t");
	else 
	printf("girl\t");
	}
	printf("\n");
}
void synch()
{
stringpass("Thread synchronization or serialization, strictly defined, is the application of particular mechanisms to\n");
stringpass("ensure that two concurrently-executing threads or processes do not execute specific portions of a program \n");
stringpass("at the same time. If one thread has begun to execute a serialized portion of the program,\n");
stringpass("any other thread trying to execute this portion must wait until the first thread finishes\n");
int i,j;
for(i=0;i<=5;i++)
printf("boy\tgirl\t");
printf("\n");
}
void busy_waiting()
{
stringpass("\nDefination :: In software engineering, busy-waiting or spinning is a technique in which a process repeatedly checks to see if a condition is true,");
stringpass("such as whether keyboard input or a lock is available");
stringpass("\n**Example**\n");


stringpass("#include <stdio.h>\n");
stringpass("#include <pthread.h>\n#include <unistd.h>\n#include <stdlib.h>\nvolatile int i = 0; \n");
/* i is global, so it is visible to all functions.
                       It's also marked volatile, because it
                       may change in a way which is not predictable by the compiler,
                       here from a different thread. */
 
/* f1 uses a spinlock to wait for i to change from 0. */
stringpass("static void *f1(void *p)``);\n{\n while (i==0) \n {\n\t/* do nothing - just keep checking over and over */\n");
   stringpass("}\nprintf(``i's value has changed ``)\n");
stringpass(" return NULL; \n}\nstatic void *f2(void *p)\n{\n sleep(60); \t/* sleep for 60 seconds */\ni = 99;\nprintf(``t2 has changed ``);\nreturn NULL;\n}");
 
stringpass("\nint main()\n{\n int rc;\npthread_t t1, t2;\nrc = pthread_create(&t1, NULL, f1, NULL);\nif (rc != 0)\n { \nfprintf(stderr,``pthread f1 failed``);\nreturn EXIT_FAILURE;\n}");
 
    stringpass("\nrc = pthread_create(&t2, NULL, f2, NULL);\nif (rc != 0) \n{\nfprintf(stderr,``pthread f2 failed``);\nreturn EXIT_FAILURE;\n }");
 
  stringpass("\npthread_join(t1, NULL);\npthread_join(t2, NULL);\n puts(``All pthreads finished.``);\n return 0;\n}");
}
void spinlock()
{
}
void c_semaphore()
{
}
void b_semaphore()
{
}
void code()
{
}
void delay(unsigned int k)
{
unsigned int i;
for(i = 0; i <= k; i++)
;
}
void stringpass(char x[])
{
	int i=0;
	while(x[i]!='\0')
	{
	printf("%c",x[i]);
	 //sleep(1);  
	delay(100000);
	i++;
	}
}

//SHIV RAM PARIDA//
